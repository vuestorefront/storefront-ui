@import '../../variables';
:root {
  --input-color: var(--c-text);
  --input-color-active: var(--c-primary);
  --input-color-invalid: #d12727;
  --input-color-disabled: var(--c-dark-variant);
  --input-font-family: var(--body-font-family-secondary);
  --input-font-size: var(--font-size-big);
  --input-font-weight: var(--body-font-weight-secondary);
  --input-line-height: 1.6;
  --input__label-focus-font-size: var(--font-size-small);
  --input__label-transition: all 150ms ease-in-out;
  --input__bar-transition: all 150ms ease-in-out;
  --input__error-message-font-family: var(--body-font-family-primary);
  --input__error-message-font-size: var(--font-size-small-mobile);
  --input__password-icon-hidden-color: var(--c-gray-variant);
  --input__password-icon-width: 1.4rem;
  @media screen and (min-width: $desktop-min) {
    --input__label-focus-font-size: var(--font-size-extra-small);
  }
}
@mixin move-label-up {
  top: calc(calc(var(--input__label-focus-font-size) / 2) - 5px);
  font-size: var(--input__label-focus-font-size);
}
.sf-input {
  $this: &;
  box-sizing: border-box;
  position: relative;
  margin-top: 5px;
  color: var(--input-color);
  font-family: var(--input-font-family);
  font-size: var(--input-font-size);
  font-weight: var(--input-font-weight);
  line-height: var(--input-line-height);
  & input {
    position: relative;
    box-sizing: border-box;
    display: block;
    width: 100%;
    height: 100%;
    padding: 5px 0;
    border-width: 0 0 1px 0;
    border-color: var(--c-light);
    background-color: transparent;
    outline: none;
    font-family: inherit;
    font-size: inherit;
    font-weight: inherit;
    line-height: inherit;
    &:focus ~ #{$this}__label {
      @include move-label-up;
      color: var(--input-color-active);
    }
    &:focus ~ #{$this}__bar::before,
    &:focus ~ #{$this}__bar::after {
      width: 50%;
    }
    &:required ~ #{$this}__label::after {
      content: " *";
    }
    &:disabled ~ #{$this}__label {
      color: var(--input-color-disabled);
    }
    &[type="number"] {
      &::-webkit-inner-spin-button,
      &::-webkit-outer-spin-button {
        -webkit-appearance: none;
        margin: 0;
      }
    }
    &#{$this}--is-password {
      padding-right: calc(var(--input__password-icon-width) + 2 * var(--spacer-big));
    }
  }
  &__wrapper {
    position: relative;
    display: flex;
    height: 100%;
    justify-content: space-between;
    align-items: center;
  }
  &__bar {
    position: relative;
    display: block;
    &::before,
    &::after {
      position: absolute;
      bottom: 0;
      width: 0;
      height: 1px;
      background-color: var(--input-color-active);
      transition: var(--input__bar-transition);
      content: "";
    }
    &::before {
      left: 50%;
    }
    &::after {
      right: 50%;
    }
  }
  &__label {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    transition: var(--input__label-transition);
    &::after {
      color: var(--input-color-active);
    }
  }
  &__error-message {
    margin-top: 5px;
    color: var(--input-color-invalid);
    font-family: var(--input__error-message-font-family);
    font-size: var(--input__error-message-font-size);
  }
  &__password-button.sf-button {
    position: absolute;
    right: var(--spacer-big);
    padding: 0;
    background: transparent;
    border: none;
    &:hover {
      background-color: transparent;
    }
  }
  &__password-icon {
    &.sf-icon {
      height: auto;
    }
    &:after {
      content: "";
      position: absolute;
      top: 50%;
      width: 100%;
      height: 1px;
      background-color: var(--input__password-icon-hidden-color);
      transform: translate3d(0, -50%, 0) rotate(45deg) scaleX(0);
      transition: transform 300ms ease-in-out;
    }
    @at-root #{&}--hidden {
      &:after {
        transform: translate3d(0, -50%, 0) rotate(45deg) scaleX(1);
      }
    }
  }
  &--invalid {
    input {
      border-color: var(--input-color-invalid);
      &:focus ~ #{$this}__label {
        &,
        &:after {
          color: var(--input-color-invalid);
        }
      }
      &:required ~ #{$this}__label::after {
        color: var(--input-color-invalid);
      }
    }
    #{$this}__bar {
      &::before,
      &::after {
        background-color: var(--input-color-invalid);
      }
    }
    @at-root #{&}#{$this}--has-text {
      #{$this}__label {
        color: var(--input-color-invalid);
      }
    }
  }
  &--has-text {
    #{$this}__label {
      @include move-label-up;
    }
  }
}
